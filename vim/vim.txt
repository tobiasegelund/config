
" vundle settings
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
set rtp+=~/.fzf
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'itchyny/lightline.vim'
" Plugin 'joshdick/onedark.vim'
" Plugin 'flazz/vim-colorschemes'
Plugin 'tomasr/molokai'
Plugin 'tpope/vim-fugitive'
Plugin 'itchyny/vim-gitbranch'
" Plugin 'w0rp/ale'
" Plugin 'maximbaz/lightline-ale'
Plugin 'neoclide/coc.nvim', {'branch': 'release'}
Plugin 'ntpeters/vim-better-whitespace'
" Plugin 'vim-scripts/indentpython.vim'
Plugin 'aonemd/kuroi.vim'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-surround'
Plugin 'preservim/nerdtree'
Plugin 'ryanoasis/vim-devicons'
" Plugin 'junegunn/fzf', { 'do': { -> fzf#install() } }
call vundle#end()
filetype plugin indent on

" Change leader
let mapleader=","

" Keybindings
inoremap kk <esc>
inoremap <C-p> <C-r>0
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <C-c> <C-w>c
nnoremap <leader>nh :nohlsearch<cr>
nnoremap <leader>h :set hlsearch<cr>
nnoremap <leader>d :CocDiagnostics<cr>
" Cycle through buffers with <leader>n and <leader>N
nnoremap <silent> <leader>n :bn<cr>
nnoremap <silent> <leader>N :bp<cr>

" fzf
nnoremap <C-p> :FZF<esc>
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }
let g:fzf_layout = { 'down': '30%' }
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Count methods
map ,c *<C-O>:%s///gn<CR>
map ,cp :%s///ng<left><left><left><left>

" For global replace
" nnoremap c# #<C-o>cgn
nnoremap r* *<c-o>cgn
nnoremap <leader>r *:%s///g<left><left>
nnoremap <leader>rc *:%s///gc<left><left><left>

" Colorscheme
" colorscheme molokai
colorscheme kuroi
" colorscheme badwolf

" General vim settings
syntax on                   " Enable syntax highlighting
set t_Co=256
set termguicolors
set ttyfast                 " Optimize vim for a fast terminal connection; may degrade performance on unusually slow SSH connections
set nowrap                  " Do not wrap lines; not good for all files, but my preference!
set showcmd                 " Normal mode; show keys you pressed (bottom-right)
set exrc                    " allow plugins to execute .vimrc files
set secure                  " recommended to accompany 'set exrc'
" set number relativenumber " turn cursor-relative line numbering on
set number
set laststatus=2
" set shiftwidth=4
set cursorline  " show a visual line under the cursor's current line
set showmatch  " show the matching part of the pair for [] {} and ()
let python_highlight_all = 1 " enable all Python syntax highlighting features
set incsearch
set hlsearch
set smartcase
set foldenable
set foldlevelstart=10
set foldnestmax=10
set encoding=UTF-8

" Prevent vim from backing the work up everywhere
set hidden
set nobackup
set nowritebackup
set noswapfile

" Python syntax
au BufNewFile,BufRead *.py set tabstop=4
au BufNewFile,BufRead *.py set softtabstop=4
au BufNewFile,BufRead *.py set shiftwidth=4
au BufNewFile,BufRead *.py set textwidth=79
au BufNewFile,BufRead *.py set expandtab
au BufNewFile,BufRead *.py set autoindent
au BufNewFile,BufRead *.py set fileformat=unix

" web syntax
au bufnewfile,bufread *.js, *.html, *.css, *.json set tabstop=2
au BufNewFile,BufRead *.js, *.html, *.css, *.json set softtabstop=2
au BufNewFile,BufRead *.js, *.html, *.css, *.json set shiftwidth=2

function! CloseOnLast()
    let cnt = 0

    for i in range(0, bufnr("$"))
        if buflisted(i)
            let cnt += 1
        endif
    endfor

    if cnt <= 1
        q
    else
        bw
    endif
 endfunction

 nnoremap qq :call CloseOnLast()<CR>

" Keep indentation level from previous line:
autocmd FileType python set autoindent
" make backspaces more powerfull
set backspace=indent,eol,start

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

"Tab completion
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> <c-e> <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" ignore files
set wildignore+=*.pyc,*.pyo,*/__pycache__/*     " Python
set wildignore+=*.swp,~*                        " Temp files
set wildignore+=*.zip,*.tar                     " Archives

" ale options
" let g:ale_set_highlights = 0
" let g:ale_linters = {'python': ['flake8']}
" let g:ale_fix_on_save = 1
" let g:ale_lint_on_save = 1
" let g:ale_sign_column_always = 1
" let g:ale_lint_on_enter = 0
" let g:ale_lint_on_insert_leave = 0
" let g:ale_lint_on_text_changed = 'never'
" let g:ale_warn_about_trailing_blank_lines = 0
" let g:ale_warn_about_trailing_whitespace = 0
" let g:ale_echo_cursor = 1
" let g:ale_disable_lsp = 0
" highlight clear ALEErrorSign
" highlight clear ALEWarningSign

" whitespace plugin
let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save = 1
let g:strip_max_file_size = 1000
let g:strip_whitespace_confirm = 0

" lightline
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             ['gitbranch', 'cocstatus', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'gitbranch#name',
      \   'cocstatus': 'coc#status'
      \ },
      \ }


" nerdtree
nnoremap <C-n> :NERDTreeFocus<CR>
" nnoremap <C-n> :NERDTree<CR>
" nnoremap <C-t> :NERDTreeToggle<CR>

" Start NERDTree when Vim starts with a directory argument.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in') |
    \ execute 'NERDTree' argv()[0] | wincmd p | enew | execute 'cd '.argv()[0] | endif
